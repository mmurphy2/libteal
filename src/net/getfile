#!/bin/dash
#
# TODO: consider whether or not this design makes sense
# TODO: if keeping, migrate from fetch_file to download_file
#
# Resolves a file by finding it locally or downloading it, possibly using a
# set of mirror servers. Optionally verifies the file using a detached GPG
# signature and/or checksum.
#
# NOTE: This script depends on the libteal scripts net/download_file,
# crypto/verify_hash, crypto/verify_signature, and path/normpath.
#
# Copyright 2022 Coastal Carolina University
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.


usage() {
    cat << EOF
$0 [options] <URL | local_path> [output_path]

Options:
    -a <spec> | --detached-signature <spec>
        Controls the path to the detached GPG signature file. If <spec> is
        not a URL, then it is appended to the <URL> to obtain the GPG
        signature file. Otherwise, the GPG signature file will be obtained
        from <spec>. The default value of <spec> is ".asc"
    -g | --gpg
        Enable GPG signature checking.
    -G <directory> | --gpg-home <directory>
        Path to the GPG home directory for signature verification. By default,
        the --homedir option is not passed to gpg2 unless this option is
        given.
    -h | --help
        Show this help message and exit.
    -s <hash> | --check-hash <hash>
        Check the hash value of the file against the supplied value. The
        supplied value must be prefixed with the hash algorithm, followed by
        a colon (:). Supported hash algorithms are: md5, sha1, sha256,
        sha512, blake2-256, blake2-512.

Downloads the requested file from <URL>, saving it to [output_path]. if the
[output_path] is a directory, then the filename from the <URL> is used as
the destination file within the directory, unless the URL contains a rename
option in the form new_name::url. If [output_path] is not an existing
directory, and no rename option is prepended to the URL, then the
[output_path] is taken to be the literal destination of the file. When a
rename option and an [output_path] are both given, the [output_path] is
assumed to be the name of the output directory. If no [output_path] is
specified, the current working directory is used.

If the <URL> is a path to an existing local file on the filesystem, no
download is performed. Instead, the path is simply printed verbatim if it
can be resolved. Renaming is possible (with the :: rename option), in
which case a local copy is made.

Optionally, GPG verification can be performed using the gpg2 command. If
GPG verification is desired, then the -g or --gpg option must be given.The
the path to the GPG home directory containing the key(s) to be used for
verification may be specified with -G or --gpg-home option. It is assumed
that the detached GPG signature will be available from the remote server at
<URL>.asc by default. To change this assumption, give the -a or
--detached-signature option as described above. For example:

-a '.sig'           # Changes the signature file to <URL>.sig

The signature file may be located at a completely different remote
destination. For example, if the <URL> is https://example.org/file, then:

-a 'https://example.com/foo/file.sig'

will obtain the detached signature from https://example.com/foo/file.sig

In addition to (or instead of) GPG verification, hash-based verification is
available via the -s or --check-hash option. The hash digest (in hex format)
against which to check is supplied as an argument, with the hash algorithm
prefixed to the digest with a colon (:) to separate them. For example:

-s md5:fbfed4a936913947136b5fe13332a963

Exit status is 0 for a successful file resolution (including download and
verification), 1 if the download fails or a local file cannot be found,
3 if GPG verification fails, and 4 if hash verification fails. Upon
success, the absolute path to the resolved file is displayed on standard
output. Errors and progress information are sent to standard error.

If verification fails, the file and detached GPG signature (if used) are
removed if they were downloaded. Files that were already present on the
system are not removed, even if verification fails.
EOF
}


self=$(readlink -e "$0")
whereami=$(dirname "${self}")
topdir=$(dirname "${whereami}")


# A few aliases to make things cleaner:
alias download_file="${whereami}/download_file"
alias normpath="${topdir}/path/normpath"
alias verify_hash="${topdir}/crypto/verify_hash"
alias verify_signature="${topdir}/crypto/verify_signature"


gpgspec='.asc'
gpgcheck=off
gpghome="${HOME}/.gnupg"
out_file=
check_hash=

while [ $# -gt 0 ]; do
    case "$1" in
        -a|--detached-signature)
            gpgspec="$2"
            shift 2
        ;;
        -G|--gpg-home)
            gpghome="$2"
            shift 2
        ;;
        -g|--gpg)
            gpgcheck="on"
            shift
        ;;
        -h|--help)
            usage
            exit 0
        ;;
        -s|--check-hash)
            check_hash="$2"
            shift 2
        ;;
        *)
            break
        ;;
    esac
done


if [ $# -lt 1 -o $# -gt 2 ]; then
    echo "Usage: $0 [options] <URL | local_path> [output_path]" >&2
    exit 2
fi


url="$1"
out_path="$2"
[ -z "${out_path}" ] && out_path="."
rename_to=


# Check to see if we need to rename the download. In this case, the URL has the form
# newname::https://whatever, so split the pieces.
if echo "${url}" | grep -q '::'; then
    rename_to=$(echo "${url}" | awk -F '::' '{print $1}')
    url=$(echo "${url}" | awk -F '::' '{print $2}')
    if ! echo "${out_path}" | grep -q '/$'; then
        out_path="${out_path}/"
    fi
    out_path="${out_path}${rename_to}"
else
    # If the out_path is a directory, append the filename from the URL.
    if [ -d "${out_path}" ]; then
        base_name=$(basename "${url}")
        out_path=$(normpath "${out_path}/${base_name}")
    fi
fi


# TODO add mirror support

resolved_file=$(fetch_file "${url}" "${out_path}")
[ -z "${resolved_file}" ] && exit 1


# If GPG signature verification was requested, download the signature file (if necessary) and verify.
if [ "${gpgcheck}" = "on" ]; then
    # Append the GPG spec to the URL to get the signature URL, unless the GPG spec is a URL, in which
    # case use it to obtain the signature file.
    sigfile="${out_path}.asc"
    sigurl="${url}${gpgspec}"
    if echo "${gpgspec}" | grep -q '://'; then
        sigurl="${gpgspec}"
    fi

    # Obtain the signature file, if necessary
    if [ ! -f "${sigfile}" ]; then
        resolved_sig=$(fetch_file "${sigurl}" "${sigfile}")
        if [ -z "${resolved_sig}" ]; then
            # Clean up the downloaded files, since verification failed
            echo "Failed to obtain GPG signature ${sigurl}" >&2
            rm -f "${out_path}"
            rm -f "${sigfile}"
            exit 3
        fi
    fi

    # Perform the verification using gpg2
    verify_signature "${sigfile}" "${have_file}" >&2
    result=$?

    # If GPG verification failed, delete any downloaded file or signature file before exiting.
    if [ ${result} -ne 0 ]; then
        echo "GPG verification failed: ${have_file}" >&2
        rm -f "${out_path}"
        rm -f "${sigfile}"
        exit 3
    fi
fi


# If hash verification was requested, run the corresponding hash command against the download
if [ -n "${check_hash}" ]; then
    verify_hash "${have_file}" "${check_hash}" >&2
    if [ $? -ne 0 ]; then
        echo "Bad checksum: ${have_file}" >&2
        rm -f "${out_path}"
        [ "${gpgcheck}" == "on" ] && rm -f "${sigfile}"
        exit 4
    fi
fi


# Success: output the resolved path
echo "${have_file}"
exit 0
