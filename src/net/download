#!/bin/dash
#
# File download tool with mirror server support.
#
# Copyright 2022 Coastal Carolina University
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.


usage() {
    cat << EOF
$0 [options] <URL | path> <output_path>

Options:
    -h | --help
        Show this help message and exit.
    -m <mirror_file> | --mirror-file <mirror_file>
        Use the specified <mirror_file> to build the download URL.

Downloads the requested file from <URL>, saving it to <output_path>. if the
<output_path> is a directory, then the filename from the <URL> is used as
the destination file within the directory. Upon success, the downloaded file
path is printed to standard output.

When the -m option is used, the behavior of this program is slightly
different. The <mirror_file> is read to determine the list of available
mirror servers, and the <path> is appended to the mirror server URL to obtain
the actual download URL. If the download from the first mirror fails, then
each subsequent mirror is tried in succession. Total failure only occurs if
no mirror provides the requested file.
EOF
}


mirror_file=
while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            usage
            exit 0
        ;;
        -m|--mirror-file)
            mirror_file="$1"
            shift
        ;;
    esac
done


if [ $# -ne 2 ]; then
    echo "Usage: $0 [options] <URL | local_path> <output_path>" >&2
    exit 2
fi


# TODO implement mirroring here or in getfile

url="$1"
out_path="$2"

if [ -d "${out_path}" ]; then
    out_path=$(echo "${out_path}" | sed 's|/*$||')
    base_name=$(basename "${url}")
    out_path="${out_path}/${base_name}"
fi


# Quick sanity check:
parent=$(dirname "${out_path}")
if [ ! -d "${parent}" ]; then
    echo "Directory not found: ${parent}" >&2
    exit 1
fi


# If the file is not already available on the local system, resolve it.
curl -o "${out_path}" "${url}" >&2
if [ $? -ne 0 ]; then
    rm -f "${out_path}"
    exit 1
fi


# Success: output the resolved path
echo "${out_path}"
exit 0
