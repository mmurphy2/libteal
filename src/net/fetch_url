#!/bin/dash
#
# Abstract front-end script for fetching a file using wget(1), producing a
# clean file-based interface for transfer status. This command is designed to
# be run in the background and is intended for script use.
#
# Copyright 2022 Coastal Carolina University
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.


usage() {
    cat << EOF
$0 [options] <URL> <output_file>

Options:
    -d <directory> | --status-directory <directory>
        Write download status files to <directory> instead of creating a new
        temporary directory.
    -h | --help
        Display this message and exit.

This program is designed to download a file from a remote <URL> and save it
to <output_file>, while running as a background process. Download status
information is saved to a status directory, which will be a newly created
temporary directory by default. However, the status directory may be specified
with the -d option.

Within the status directory, several files will be created:
    dest
        Contains the value of <output_file>
    log
        Contains the log output from wget(1), which will have progress
        information and troubleshooting data.
    pid
        Contains the process ID of this program.
    status
        Once wget(1) has finished, its exit status is recorded in this file.
    url
        Contains the value of <URL>

Before the download begins, the path to the status directory will be sent to
standard output. No other output is produced, and only error messages from
fetch_url itself are send to standard error. Errors produced by wget will be
saved in the log file. This program is intended for use by scripts that need
to be able to handle status information in a consistent manner.
EOF
}

self=$(readlink -e "$0")
whereami=$(dirname "${self}")


tempdir=
case "$1" in
    -d|--status-directory)
        tempdir="$2"
        shift 2
    ;;
    -h|--help)
        usage
        exit 0
    ;;
esac


if [ $# -ne 2 ]; then
    echo "Usage: $0 [options] <URL> <output_file>" >&2
    exit 2
fi


# Create or verify the status output directory
if [ -z "${tempdir}" ]; then
    tempdir=$(mktemp -d)
else
    if [ ! -d "${tempdir}" ]; then
        echo "Directory not found: ${tempdir}" >&2
        exit 1
    fi
fi


# Write the URL and output_file to the status directory, in case the outer script loses track
# of the pid. Also write this script's pid to the status directory for good measure.
echo "$1" > "${tempdir}/url"
echo "$2" > "${tempdir}/dest"
echo $$ > "${tempdir}/pid"


# This is normally our only output: the path to the temporary directory. Client scripts will use
# the various files in this status directory to track the download.
echo "${tempdir}"


# Perform the download
wget -O "$2" "$1" -o "${tempdir}/log"
status=$?


# Write the wget status then exit with that same status. This way, a client script has several
# choices for checking for a successful download.
echo "${status}" > "${tempdir}/status"
exit ${status}
