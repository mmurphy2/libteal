#!/bin/dash
#
# Downloads a single file using curl(1). Download progress information is
# written to a temporary directory as the operation proceeds.
#
# Copyright 2022 Coastal Carolina University
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.


whatami=$(readlink -e "$0")
whereami=$(dirname "${whatami}")


usage() {
    cat << EOF
$0 [options] <URL> <output_path>

Options:
    -h | --help
        Show this help message and exit.
    -p <server> | --proxy <server>
        Use the specified proxy server to complete the download.
    -s <dir> | --status <dir>
        Use the specified directory for status files. Otherwise, a temporary
        directory is created with mktemp(1).

Downloads the requested file from <URL>, saving it to <output_path>. if the
<output_path> is a directory, then the filename from the <URL> is used as
the destination file within the directory. Upon starting the download, the
status directory path is printed on standard output.

The status directory contains information about the ongoing download:

 percent              Integer percentage of the download completed
 progress.log         Raw progress output from curl
 remain               Time remaining in seconds
 result               Exit status of curl, after download finishes
 speed                Current transfer speed in bytes per second
 total                Total file size in bytes
 transferred          Total number of bytes downloaded so far

Note that percent, remain, and total require the server to provide a correct
content-length (or equivalent) at the start of the download. These values
therefore might not be available from some servers.
EOF
}


update_progress() {
    cat "${status_output}/progress.log" | tr '\r' '\n' | tail -n 1 | \
        awk -f "${whereami}/download_file.awk" \
            -v percent_file="${status_output}/percent" \
            -v remain_file="${status_output}/remain" \
            -v speed_file="${status_output}/speed" \
            -v total_file="${status_output}/total" \
            -v transferred_file="${status_output}/transferred"
}


status_output=
proxy=
while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            usage
            exit 0
        ;;
        -p|--proxy)
            proxy="$2"
            shift 2
        ;;
        -s|--status)
            status_output="$2"
            shift 2
        ;;
        *)
            break
        ;;
    esac
done


if [ $# -ne 2 ]; then
    echo "Usage: $0 [options] <URL> <output_path>" >&2
    exit 2
fi


url="$1"
out_path="$2"

if [ -d "${out_path}" ]; then
    out_path=$(echo "${out_path}" | sed 's|/*$||')
    base_name=$(basename "${url}")
    out_path="${out_path}/${base_name}"
fi


# Quick sanity check for the output path:
parent=$(dirname "${out_path}")
if [ ! -d "${parent}" ]; then
    echo "Directory not found: ${parent}" >&2
    exit 1
fi


# Create a temporary status directory if -s wasn't used
if [ -z "${status_output}" ]; then
    status_output=$(mktemp -d)
elif [ ! -d "${status_output}" ]; then
    echo "Directory not found: ${status_output}" >&2
    exit 1
fi
echo "${status_output}"


# Test write permissions by writing the PID of this script to the output directory
echo $$ > "${status_output}/wrapper_pid" || exit 1


# Start curl in the background
curlpid=
if [ -z "${proxy}" ]; then
    curl -w '%{http_code}\n' -f -o "${out_path}" "${url}" 2>"${status_output}/progress.log" \
        > "${status_output}/http_code" &
    curlpid=$!
else
    curl -w '%{http_code}\n' -x "${proxy}" -f -o "${out_path}" "${url}" \
        2>"${status_output}/progress.log" > "${status_output}/http_code" &
    curlpid=$!
fi


# While curl runs, update the progress information every second, yielding between updates
ppid=$(ps -p "${curlpid}" -o ppid=)
while [ "${ppid}" -eq "$$" ]; do
    update_progress
    sleep 1
    ppid=$(ps -p "${curlpid}" -o ppid=)
done


# Do a final progress update, in case we were asleep when curl finished
update_progress


# Get the exit status from curl and write it to the status directory
wait "${curlpid}"
status=$?
echo "${status}" > "${status_output}/result"


# If the download failed, clean up the partial file
if [ ${status} -ne 0 ]; then
    rm -f "${out_path}"
    exit 1
fi


exit ${status}
