#!/bin/dash
#
# Copyright 2022 Coastal Carolina University
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

usage() {
    cat << EOF
$0 <MANIFEST.bz2> <output_directory>
$0 <-h | --help>

Processes the MANIFEST.bz2 file, appending the package file lists to the
package data files created by process_package_list. This program should be run
only after process_package_list has finished.
EOF
}


whatami=$(readlink -e "$0")
whereami=$(dirname "${whatami}")


if [ "$1" = "-h" -o "$1" = "--help" ]; then
    usage
    exit 0
fi

if [ $# -ne 2 ]; then
    echo "Usage: $0 [options] <MANIFEST.bz2> <output_directory>"
    echo "       $0 <-h | --help>"
    exit 2
fi


# We're going to change directory, so get the absolute path to the manifest
in_file=$(readlink -e "$1")


if [ -f "${in_file}" ]; then
    if [ -d "$2" ]; then
        cd "$2" || exit 1
        bzcat "${in_file}" | awk -f "${whereami}/process_manifest.awk"
    else
        echo "Directory does not exist: $2" >&2
        echo "Did you run process_package_list first?" >&2
        exit 1
    fi
else
    echo "Input file not found: ${in_file}" >&2
    exit 1
fi
